<?php
namespace models;
use base\orm\modelo;
use gamboamartin\errores\errores;
use JsonException;
use PDO;
use stdClass;
use Throwable;

class nom_par_percepcion extends modelo{

    public function __construct(PDO $link){
        $tabla = __CLASS__;
        $columnas = array($tabla=>false, 'nom_nomina'=>$tabla, 'nom_percepcion'=>$tabla,
            'cat_sat_tipo_percepcion_nom'=>'nom_percepcion');
        $campos_obligatorios = array('nom_nomina_id','descripcion_select','alias','codigo_bis','nom_percepcion_id',
            'importe_gravado','importe_exento');

        parent::__construct(link: $link,tabla:  $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas);
    }

    /**
     * @throws JsonException
     */
    public function alta_bd(): array|stdClass
    {

        $keys = array('nom_nomina_id');
        $valida = $this->validacion->valida_ids(keys: $keys, registro: $this->registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar registro', data: $valida);
        }

        if(!isset($this->registro['codigo'])){

            $nom_nomina = (new nom_nomina($this->link))->registro(registro_id: $this->registro['nom_nomina_id'],
                retorno_obj: true);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al obtener $nom_nomina', data: $nom_nomina);
            }

            $codigo = $this->registro['nom_nomina_id'];
            $codigo .= '-';
            $codigo .= $nom_nomina->cat_sat_periodicidad_pago_nom_id;
            $codigo .= '-';
            $codigo .= $nom_nomina->em_empleado_rfc;
            $codigo .= '-';
            $codigo .= $nom_nomina->im_registro_patronal_id;
            $codigo .= '-';
            try {
                $codigo .= random_int(10, 99) . random_int(10, 99) . random_int(10, 99) . random_int(10, 99);
            }
            catch (Throwable $e){
                return $this->error->error(mensaje: 'Error al generar codigo random', data: $e);
            }

            $this->registro['codigo'] = $codigo;

        }

        if(!isset($this->registro['descripcion'])){

            $nom_nomina = (new nom_nomina($this->link))->registro(registro_id: $this->registro['nom_nomina_id'],
                retorno_obj: true);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al obtener $nom_nomina', data: $nom_nomina);
            }

            $descripcion = $this->registro['nom_nomina_id'];
            $descripcion .= '-';
            $descripcion .= $nom_nomina->cat_sat_periodicidad_pago_nom_descripcion;
            $descripcion .= '-';
            $descripcion .= $nom_nomina->em_empleado_rfc;
            $descripcion .= '-';
            $descripcion .= $nom_nomina->im_registro_patronal_descripcion;
            $descripcion .= '-';
            try {
                $descripcion .= random_int(10, 99) . random_int(10, 99) . random_int(10, 99) . random_int(10, 99);
            }
            catch (Throwable $e){
                return $this->error->error(mensaje: 'Error al generar codigo random', data: $e);
            }

            $this->registro['descripcion'] = $descripcion;

        }

        if(!isset($this->registro['descripcion_select'])){

            $this->registro['descripcion_select'] = $this->registro['descripcion'];
        }
        if(!isset($this->registro['alias'])){

            $this->registro['alias'] = $this->registro['descripcion'];

        }

        if(!isset($this->registro['codigo_bis'])){

            $this->registro['codigo_bis'] = $this->registro['codigo'];
        }
        if(!isset($this->registro['importe_gravado'])){

            $this->registro['importe_gravado'] = 0;
        }
        if(!isset($this->registro['importe_gravado'])){

            $this->registro['importe_gravado'] = 0;
        }
        if(!isset($this->registro['importe_exento'])){

            $this->registro['importe_exento'] = 0;
        }

        $total = $this->registro['importe_exento']+ $this->registro['importe_gravado'];
        $total = round($total,2);
        if($total<=0.0){
            return $this->error->error(mensaje: 'Error total es 0', data: $total);
        }

        $r_alta_bd =  parent::alta_bd(); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar percepcion', data: $r_alta_bd);
        }

        return $r_alta_bd;
    }
}