<?php
/**
 * @author Martin Gamboa Vazquez
 * @version 1.0.0
 * @created 2022-05-14
 * @final En proceso
 *
 */

namespace gamboamartin\nomina\controllers;

use gamboamartin\errores\errores;
use gamboamartin\system\links_menu;
use gamboamartin\template\html;
use html\nom_otro_pago_html;
use gamboamartin\nomina\models\nom_otro_pago;
use gamboamartin\nomina\models\nom_par_deduccion;
use gamboamartin\nomina\models\nom_par_percepcion;
use PDO;
use stdClass;

class controlador_nom_otro_pago extends base_nom
{
    public stdClass $paths_conf;


    public function __construct(PDO      $link, html $html = new \gamboamartin\template_1\html(),
                                stdClass $paths_conf = new stdClass())
    {
        $modelo = new nom_otro_pago(link: $link);
        $html_ = new nom_otro_pago_html(html: $html);
        $obj_link = new links_menu(link: $link, registro_id: $this->registro_id);
        parent::__construct(html: $html_, link: $link, modelo: $modelo, obj_link: $obj_link, paths_conf: $paths_conf);
        $this->titulo_lista = 'Nominas';
        $this->paths_conf = $paths_conf;
    }

    public function alta(bool $header, bool $ws = false): array|string
    {
        $r_alta = parent::alta(header: false, ws: false); // TODO: Change the autogenerated stub
        if (errores::$error) {
            return $this->retorno_error(mensaje: 'Error al generar template', data: $r_alta, header: $header, ws: $ws);
        }

        $keys_selects = array();
        $keys_selects['cat_sat_tipo_otro_pago_nom'] = new stdClass();
        $keys_selects['cat_sat_tipo_otro_pago_nom']->label = 'Tipo Otro Pago';

        $inputs = (new nom_otro_pago_html(html: $this->html_base))->genera_inputs_alta(
            controler: $this, keys_selects: $keys_selects, link: $this->link);
        if (errores::$error) {
            $error = $this->errores->error(mensaje: 'Error al generar inputs', data: $inputs);
            print_r($error);
            die('Error');
        }
        return $r_alta;
    }

    private function base(stdClass $params = new stdClass()): array|stdClass
    {

        $r_modifica = parent::modifica(header: false, ws: false); // TODO: Change the autogenerated stub
        if (errores::$error) {
            return $this->errores->error(mensaje: 'Error al generar template', data: $r_modifica);
        }

        $inputs = (new nom_otro_pago_html(html: $this->html_base))->inputs_nom_otro_pago(
            controlador: $this, params: $params);
        if (errores::$error) {
            return $this->errores->error(mensaje: 'Error al inicializar inputs', data: $inputs);
        }

        $data = new stdClass();
        $data->template = $r_modifica;
        $data->inputs = $inputs;

        return $data;
    }


    public function modifica(bool $header, bool $ws = false): array|stdClass
    {
        $base = $this->base();
        if (errores::$error) {
            return $this->retorno_error(mensaje: 'Error al maquetar datos', data: $base,
                header: $header, ws: $ws);
        }

        $this->nom_nomina_id = $this->registro_id;

        $partidas = $this->partidas();
        if (errores::$error) {
            return $this->retorno_error(mensaje: 'Error al obtener partidas', data: $partidas, header: $header, ws: $ws);
        }

        return $base->template;
    }
}
