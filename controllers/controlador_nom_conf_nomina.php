<?php
/**
 * @author Martin Gamboa Vazquez
 * @version 1.0.0
 * @created 2022-05-14
 * @final En proceso
 *
 */
namespace gamboamartin\nomina\controllers;

use gamboamartin\errores\errores;
use gamboamartin\system\actions;
use gamboamartin\system\links_menu;
use gamboamartin\system\system;
use gamboamartin\template\html;
use html\nom_conf_nomina_html;
use html\nom_conf_percepcion_html;
use html\nom_deduccion_html;
use models\nom_conf_nomina;
use models\nom_conf_percepcion;
use PDO;
use stdClass;
use Throwable;

class controlador_nom_conf_nomina extends system {

    public string $link_nom_conf_percepcion_alta_bd = '';
    public stdClass $percepciones;
    public int $nom_conf_percepcion_id = -1;

    public function __construct(PDO $link, html $html = new \gamboamartin\template_1\html(),
                                stdClass $paths_conf = new stdClass()){
        $modelo = new nom_conf_nomina(link: $link);
        $html_ = new nom_conf_nomina_html(html: $html);
        $obj_link = new links_menu(link: $link, registro_id: $this->registro_id);
        parent::__construct(html:$html_, link: $link,modelo:  $modelo, obj_link: $obj_link, paths_conf: $paths_conf);

        $this->titulo_lista = 'Configuracion Nomina';

        $link_nom_conf_percepcion_alta_bd = $obj_link->link_con_id(accion: 'asigna_percepcion_alta_bd',
            registro_id: $this->registro_id, seccion: $this->seccion);
        if (errores::$error) {
            $error = $this->errores->error(mensaje: 'Error al generar link', data: $link_nom_conf_percepcion_alta_bd);
            print_r($error);
            die('Error');
        }

        $init = $this->init_partidas_ids();
        if (errores::$error) {
            $error = $this->errores->error(mensaje: 'Error al inicializar ids', data: $init);
            print_r($error);
            die('Error');
        }

        $this->link_nom_conf_percepcion_alta_bd = $link_nom_conf_percepcion_alta_bd;
    }

    public function alta(bool $header, bool $ws = false): array|string
    {
        $r_alta =  parent::alta(header: false, ws: false); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar template',data:  $r_alta, header: $header,ws:$ws);
        }

        $keys_selects = array();

        $keys_selects['nom_conf_factura'] = new stdClass();
        $keys_selects['nom_conf_factura']->label = 'Conf Factura';

        $keys_selects['cat_sat_periodicidad_pago_nom'] = new stdClass();
        $keys_selects['cat_sat_periodicidad_pago_nom']->label = 'Periodicidad de Pago';
        $keys_selects['cat_sat_periodicidad_pago_nom']->cols = 6;

        $keys_selects['cat_sat_tipo_nomina'] = new stdClass();
        $keys_selects['cat_sat_tipo_nomina']->label = 'Tipo de Nomina';
        $keys_selects['cat_sat_tipo_nomina']->cols = 6;


        $inputs = (new nom_conf_nomina_html(html: $this->html_base))->genera_inputs_alta(controler: $this,
            keys_selects: $keys_selects, link: $this->link);
        if(errores::$error){
            $error = $this->errores->error(mensaje: 'Error al generar inputs',data:  $inputs);
            print_r($error);
            die('Error');
        }
        return $r_alta;
    }

    private function asigna_link_asigna_percepcion_row(stdClass $row): array|stdClass
    {
        $keys = array('nom_conf_nomina_id');
        $valida = $this->validacion->valida_ids(keys: $keys,registro:  $row);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al validar row',data:  $valida);
        }

        $link_asigna_percepcion = $this->obj_link->link_con_id(accion:'asigna_percepcion',registro_id:  $row->nom_conf_nomina_id,
            seccion:  $this->tabla);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al genera link',data:  $link_asigna_percepcion);
        }

        $row->link_asigna_percepcion = $link_asigna_percepcion;
        $row->link_asigna_percepcion_style = 'info';

        return $row;
    }

    public function asigna_percepcion(bool $header, bool $ws = false): array|stdClass
    {
        $r_alta = parent::alta(header: false, ws: false);
        if (errores::$error) {
            return $this->retorno_error(mensaje: 'Error al generar template', data: $r_alta, header: $header, ws: $ws);
        }

        $keys_selects = array();
        $keys_selects['nom_conf_nomina_id'] = new stdClass();
        $keys_selects['nom_conf_nomina_id']->cols = 6;
        $keys_selects['nom_conf_nomina_id']->disabled = true;
        $keys_selects['nom_conf_nomina_id']->filtro = array('nom_conf_nomina.id' => $this->registro_id);
        $keys_selects['nom_conf_nomina_id']->id_selected = $this->registro_id;
        $keys_selects['nom_conf_nomina_id']->label = 'Configuracion Nomina';

        $keys_selects['nom_percepcion_id'] = new stdClass();
        $keys_selects['nom_percepcion_id']->cols = 6;
        $keys_selects['nom_percepcion_id']->label = 'Percepcion';

        $inputs = (new nom_conf_nomina_html(html: $this->html_base))->genera_inputs_asigna_percepcion(controler: $this, keys_selects: $keys_selects,
            link: $this->link);
        if (errores::$error) {
            $error = $this->errores->error(mensaje: 'Error al generar inputs', data: $inputs);
            print_r($error);
            die('Error');
        }

        $filtro['nom_conf_percepcion.nom_conf_nomina_id'] = $this->registro_id;
        $percepciones = (new nom_conf_percepcion($this->link))->filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener percepciones de configuracion',data:  $percepciones,
                header: $header,ws:$ws);
        }

        foreach ($percepciones->registros as $indice => $percepcion) {
            $percepcion = $this->data_percepcion_btn(percepcion: $percepcion);
            if (errores::$error) {
                return $this->retorno_error(mensaje: 'Error al asignar botones', data: $percepcion, header: $header, ws: $ws);
            }
            $percepciones->registros[$indice] = $percepcion;
        }
        $this->percepciones = $percepciones;

        return $inputs;
    }

    public function asigna_percepcion_alta_bd(bool $header, bool $ws = false): array|stdClass
    {
        $this->link->beginTransaction();

        $siguiente_view = (new actions())->init_alta_bd();
        if (errores::$error) {
            $this->link->rollBack();
            return $this->retorno_error(mensaje: 'Error al obtener siguiente view', data: $siguiente_view,
                header: $header, ws: $ws);
        }

        if (isset($_POST['btn_action_next'])) {
            unset($_POST['btn_action_next']);
        }
        $_POST['nom_conf_nomina_id'] = $this->registro_id;

        $alta = (new nom_conf_percepcion($this->link))->alta_registro(registro: $_POST);
        if (errores::$error) {
            $this->link->rollBack();
            return $this->retorno_error(mensaje: 'Error al dar de alta percepcion', data: $alta,
                header: $header, ws: $ws);
        }


        $this->link->commit();

        if ($header) {
            $this->retorno_base(registro_id:$this->registro_id, result: $alta,
                siguiente_view: $siguiente_view, ws:  $ws);
        }
        if ($ws) {
            header('Content-Type: application/json');
            echo json_encode($alta, JSON_THROW_ON_ERROR);
            exit;
        }
        $alta->siguiente_view = $siguiente_view;

        return $alta;
    }

    public function asigna_percepcion_elimina_bd(bool $header, bool $ws = false): array|stdClass
    {
        $this->link->beginTransaction();
        $r_elimina = (new nom_conf_percepcion($this->link))->elimina_bd(id: $this->nom_conf_percepcion_id);
        if (errores::$error) {
            $this->link->rollBack();
            return $this->retorno_error(mensaje: 'Error al eliminar otro pago', data: $r_elimina, header: $header,
                ws: $ws);
        }
        $this->link->commit();

        $this->out(header: $header,result:  $r_elimina,siguiente_view:  'asigna_percepcion',ws:  $ws);
        $r_elimina->siguiente_view = 'asigna_percepcion';

        return $r_elimina;
    }

    public function asigna_percepcion_modifica(bool $header, bool $ws = false): array|stdClass|string
    {
        $controlador = new controlador_nom_conf_percepcion($this->link);
        $controlador->registro_id = $this->nom_conf_percepcion_id;

        $r_modifica = $controlador->modifica(header: false, aplica_form: false);
        if (errores::$error) {
            return $this->errores->error(mensaje: 'Error al generar template', data: $r_modifica);
        }

        $inputs = (new nom_conf_percepcion_html(html: $this->html_base))->inputs_nom_conf_percepcion(
            controlador: $controlador);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializar inputs',data:  $inputs);
        }
        $this->inputs = $inputs;

        return $r_modifica;
    }



    private function base(stdClass $params = new stdClass()): array|stdClass
    {
        $r_modifica =  parent::modifica(header: false,aplica_form:  false); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al generar template',data:  $r_modifica);
        }

        $inputs = (new nom_conf_nomina_html(html: $this->html_base))->inputs_nom_conf_nomina(
            controlador:$this, params: $params);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializar inputs',data:  $inputs);
        }

        $data = new stdClass();
        $data->template = $r_modifica;
        $data->inputs = $inputs;

        return $data;
    }

    private function data_percepcion_btn(array $percepcion): array
    {
        $params['nom_conf_percepcion_id'] = $percepcion['nom_conf_percepcion_id'];

        $btn_elimina = $this->html_base->button_href(accion: 'asigna_percepcion_elimina_bd', etiqueta: 'Elimina',
            registro_id: $this->registro_id, seccion: 'nom_conf_nomina', style: 'danger', params: $params);
        if (errores::$error) {
            return $this->errores->error(mensaje: 'Error al generar btn', data: $btn_elimina);
        }
        $percepcion['link_elimina'] = $btn_elimina;

        $btn_modifica = $this->html_base->button_href(accion: 'asigna_percepcion_modifica', etiqueta: 'Modifica',
            registro_id: $this->registro_id, seccion: 'nom_conf_nomina', style: 'warning', params: $params);
        if (errores::$error) {
            return $this->errores->error(mensaje: 'Error al generar btn', data: $btn_modifica);
        }
        $percepcion['link_modifica'] = $btn_modifica;

        return $percepcion;
    }

    private function init_partidas_ids(): array
    {
        if (isset($_GET['nom_conf_percepcion_id'])){
            $this->nom_conf_percepcion_id = $_GET['nom_conf_percepcion_id'];
        }

        return $_GET;
    }

    public function lista(bool $header, bool $ws = false): array
    {
        $lista = parent::lista($header, $ws);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar datos',data:  $lista, header: $header,ws:$ws);
        }

        $registros = $this->maqueta_registros_lista(registros: $this->registros);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar registros',data:  $registros, header: $header,ws:$ws);
        }
        $this->registros = $registros;

        return $lista;
    }

    private function limpia_btn(): array
    {
        if (isset($_POST['btn_action_next'])) {
            unset($_POST['btn_action_next']);
        }
        return $_POST;
    }

    private function maqueta_registros_lista(array $registros): array
    {
        foreach ($registros as $indice=> $row){
            $row = $this->asigna_link_asigna_percepcion_row(row: $row);
            if(errores::$error){
                return $this->errores->error(mensaje: 'Error al maquetar row',data:  $row);
            }
            $registros[$indice] = $row;

        }
        return $registros;
    }

    public function modifica(bool $header, bool $ws = false, string $breadcrumbs = '', bool $aplica_form = true,
                             bool $muestra_btn = true): array|string
    {
        $base = $this->base();
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar datos',data:  $base,
                header: $header,ws:$ws);
        }

        return $base->template;
    }

    private function out(bool $header, mixed $result, string $siguiente_view, bool $ws){
        if ($header) {
            $this->retorno_base(registro_id:$this->registro_id, result: $result,
                siguiente_view: $siguiente_view, ws:  $ws);
        }
        if ($ws) {
            header('Content-Type: application/json');
            try {
                echo json_encode($result, JSON_THROW_ON_ERROR);
            }
            catch (Throwable $e){
                $error = $this->errores->error(mensaje: 'Error en json', data: $e);
                print_r($error);
            }
            exit;
        }
        return $result;
    }
}
